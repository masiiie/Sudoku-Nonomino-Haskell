import Hugs.Observe
import Estructuras
import Sudoku_methods

--sudoku1 ok
--sudoku2 ok
--sudoku3 ok
--sudoku4 ok



mi_print :: Show a => [a] -> IO ()
mi_print [] = print "final"
mi_print (a:as) =
    do
        print a
        mi_print as

main = 
    do
        setBkpt "fib" True
        let sudoku1 = [10, 10, 10, 11, 10, 22, 20, 23, 20, 36, 10, 10, 10, 20, 20, 20, 29, 20, 30, 30, 10, 30, 40, 40, 40, 48, 40, 38, 30, 30, 30, 57, 64, 60, 40, 40, 70, 70, 34, 55, 50, 66, 60, 40, 40, 70, 70, 52, 50, 60, 60, 60, 80, 80, 73, 70, 59, 98, 90, 95, 60, 80, 80, 74, 70, 51, 97, 90, 99, 60, 80, 80, 70, 50, 50, 93, 96, 90, 80, 87, 80]
        let sudoku2 = [10, 10, 10, 20, 33, 30, 30, 30, 30, 17, 10, 20, 26, 20, 30, 30, 30, 30, 15, 10, 20, 21, 20, 40, 48, 42, 43, 10, 55, 20, 60, 27, 40, 70, 40, 40, 10, 53, 50, 60, 40, 40, 70, 70, 70, 50, 50, 50, 60, 70, 70, 70, 70, 80, 50, 50, 60, 60, 90, 91, 70, 87, 89, 50, 64, 66, 90, 90, 93, 82, 80, 81, 61, 60, 98, 90, 90, 90, 80, 83, 85]
        let sudoku3 = [10, 10, 20, 26, 20, 32, 30, 30, 30, 12, 16, 20, 23, 20, 20, 30, 34, 38, 10, 18, 15, 20, 20, 40, 31, 30, 50, 13, 10, 60, 40, 40, 40, 40, 50, 50, 60, 60, 69, 60, 40, 40, 48, 52, 50, 68, 62, 73, 70, 40, 80, 50, 50, 50, 60, 60, 70, 94, 90, 88, 89, 80, 50, 70, 70, 70, 90, 90, 90, 80, 87, 80, 79, 70, 70, 90, 97, 90, 90, 85, 80]
        let sudoku4 = [10, 15, 10, 20, 20, 20, 30, 39, 30, 19, 10, 10, 22, 20, 20, 20, 30, 30, 10, 10, 41, 40, 27, 29, 30, 30, 30, 10, 40, 40, 40, 40, 50, 58, 50, 34, 64, 61, 42, 40, 43, 50, 56, 50, 79, 60, 60, 60, 86, 80, 51, 50, 70, 70, 60, 60, 88, 80, 90, 50, 90, 73, 70, 62, 80, 83, 90, 90, 95, 90, 77, 70, 60, 80, 80, 80, 90, 90, 90, 70, 71]

        let sudoku = sudoku4
        let nnl = numlist_to_nonolist sudoku (replicate 9 [])
        --let solucion = if can_make_sudoku nnl then solve (init_sudoku nnl) else Sudoku [] []
        let k = can_make_sudoku nnl
        let sudoku = init_sudoku nnl
        print sudoku
        print k
        let solucion = solve sudoku
        print solucion
        print (to_solve solucion)
